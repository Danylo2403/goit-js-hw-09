{"mappings":"oeAEA,IAAAA,EAAAC,EAAA,S,WAKoC,MAA9BC,EAAYC,SAASC,cAAc,kBACnCC,EAAkBF,SAASC,cAAc,qBACzCE,EAAiBH,SAASC,cAAc,oBACxCG,EAAcJ,SAASC,cAAc,sBAIfF,EAAlBM,iBAAiB,SAASC,IAClCA,EAAEC,iBAGyB,MAArBC,EAASC,SAASL,EAAYM,OAC9BC,EAAYF,SAASN,EAAeO,OACpCE,EAAaH,SAASP,EAAgBQ,OAE5C,IAAK,IAAIG,EAAW,EAAGA,GAAYL,EAAQK,IAAY,CAGrDC,EAAcD,EAFFD,EAAaD,EAAYE,EAAWF,GAG7CI,MAAK,EAACC,SAAEA,EAAQC,MAAEA,MACjBpB,EAAAqB,OAAOC,QAAQ,uBAAqBH,QAAiBC,MAAU,IAEhEG,OAAM,EAACJ,SAAEA,EAAQC,MAAEA,MAClBpB,EAAAqB,OAAOG,QAAQ,sBAAoBL,QAAeC,MAAU,G,KAKpE,MAAMH,EAAgB,CAACE,EAAUC,IACxB,IAAIK,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,IAGpCJ,EAAQ,C,SAAEP,E,MAAUC,IAGtBO,EAAO,C,SAAER,E,MAAUC,GAAQ,GAC1BA,EAAM","sources":["src/js/03-promises.js"],"sourcesContent":["// Імпортуємо клас Notify з бібліотеки notiflix для відображення сповіщень\n// Імпортуємо код для відображення сповіщень з файлу notiflix-notify-aio-3.2.6.min.js\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport 'notiflix/dist/notiflix-notify-aio-3.2.6.min.js';\n\n\n// Отримуємо посилання на HTML-елементи сторінки\nconst createBtn = document.querySelector('.form > button');\nconst firstDelayInput = document.querySelector('input[name=delay]');\nconst delayStepInput = document.querySelector('input[name=step]');\nconst amountInput = document.querySelector('input[name=amount]');\n\n\n// Додаємо слухача подій для кнопки \"createBtn\"\ncreateBtn.addEventListener('click', e => {\n  e.preventDefault(); //Запобігаємо перезавантаженню сторінки при кліку на кнопку\n\n   // Зчитуємо значення з полів вводу\n  const amount = parseInt(amountInput.value);\n  const delayStep = parseInt(delayStepInput.value);\n  const firstDelay = parseInt(firstDelayInput.value);\n\n  for (let position = 1; position <= amount; position++) {\n    let delay = firstDelay + delayStep * position - delayStep;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n\nconst createPromise = (position, delay) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n\n      reject({ position, delay });\n    }, delay);\n  });\n};"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createBtn","document","querySelector","$47d4ff9957288465$var$firstDelayInput","$47d4ff9957288465$var$delayStepInput","$47d4ff9957288465$var$amountInput","addEventListener","e","preventDefault","amount","parseInt","value","delayStep","firstDelay","position1","$47d4ff9957288465$var$createPromise","then","position","delay","Notify","success","catch","failure","Promise","resolve","reject","setTimeout","Math","random"],"version":3,"file":"03-promises.3cf0ac62.js.map"}